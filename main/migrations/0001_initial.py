# Generated by Django 4.2 on 2023-07-14 17:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_name", models.CharField(max_length=200, verbose_name="Имя")),
                (
                    "order_phone",
                    models.CharField(
                        max_length=16,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Номер",
                    ),
                ),
                (
                    "order_email",
                    models.EmailField(
                        blank=True, max_length=70, unique=True, verbose_name="Почта"
                    ),
                ),
                (
                    "services",
                    models.CharField(
                        choices=[
                            ("cut1", "cut1"),
                            ("cut2", "cut2"),
                            ("cut3", "cut3"),
                            ("cut4", "cut4"),
                            ("cut5", "cut5"),
                            ("beard1", "beard1"),
                            ("beard2", "beard2"),
                            ("beard3", "beard3"),
                            ("beard4", "beard4"),
                            ("style1", "style1"),
                            ("style2", "style2"),
                            ("style3", "style3"),
                            ("style4", "style4"),
                            ("style5", "style5"),
                            ("style6", "style6"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Услуги",
                    ),
                ),
                (
                    "Master",
                    models.CharField(
                        choices=[
                            ("Master1", "Master1"),
                            ("Master2", "Master2"),
                            ("Master3", "Master3"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Мастер",
                    ),
                ),
                (
                    "Date",
                    models.CharField(max_length=20, null=True, verbose_name="Дата"),
                ),
                (
                    "Time",
                    models.CharField(
                        choices=[
                            ("10:00", "10:00"),
                            ("10:30", "10:30"),
                            ("11:00", "11:00"),
                            ("11:30", "11:30"),
                            ("12:00", "12:00"),
                            ("12:30", "12:30"),
                            ("13:00", "13:00"),
                            ("13:30", "13:30"),
                            ("14:00", "14:00"),
                            ("14:30", "14:30"),
                            ("15:30", "15:30"),
                            ("16:30", "16:30"),
                            ("17:00", "17:00"),
                            ("18:00", "18:00"),
                            ("18:45", "18:45"),
                            ("19:30", "19:30"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Время",
                    ),
                ),
            ],
            options={"verbose_name": "Заказ", "verbose_name_plural": "Заказы",},
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(default="", max_length=254, unique=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager()),],
        ),
    ]
